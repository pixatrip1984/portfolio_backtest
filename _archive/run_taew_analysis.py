# run_taew_analysis_fast.py
"""
Script de Validaci√≥n OPTIMIZADO para la Integraci√≥n de taew

Versi√≥n optimizada que reduce significativamente el tiempo de ejecuci√≥n
validando la funcionalidad b√°sica sin an√°lisis incremental extensivo.
"""

import pandas as pd
import sys
import os
from datetime import datetime

# Asegurar que podemos importar desde nuestros m√≥dulos
from config import settings
from data_collectors.historical_data import get_extended_historical_klines
from analysis_engines.taew_analyzer import TaewAnalyzer


def quick_taew_validation():
    """
    Validaci√≥n r√°pida y eficiente de la integraci√≥n con taew.
    """
    print("="*50)
    print("üöÄ VALIDACI√ìN R√ÅPIDA - INTEGRACI√ìN TAEW")
    print("="*50)
    
    # --- 1. Configuraci√≥n Optimizada ---
    SYMBOL = "DOGEUSDT"
    INTERVAL = "4h"  # Intervalo m√°s amplio = menos datos = m√°s r√°pido
    START_DATE = "01 Dec, 2024"  # Solo ~6 semanas de datos
    
    print(f"üìä Configuraci√≥n optimizada:")
    print(f"   S√≠mbolo: {SYMBOL}")
    print(f"   Intervalo: {INTERVAL} (optimizado)")
    print(f"   Desde: {START_DATE} (dataset reducido)")
    print("-"*50)
    
    # --- 2. Carga de Datos Limitados ---
    print("üì• Cargando datos hist√≥ricos...")
    try:
        historical_df = get_extended_historical_klines(SYMBOL, INTERVAL, START_DATE)
        
        if historical_df.empty:
            print("‚ùå ERROR: No se pudieron cargar datos hist√≥ricos")
            return False
            
        print(f"‚úÖ Datos cargados:")
        print(f"   Velas: {len(historical_df)} (dataset reducido)")
        print(f"   Rango: {historical_df['Close_time'].min()} a {historical_df['Close_time'].max()}")
        
    except Exception as e:
        print(f"‚ùå ERROR cargando datos: {e}")
        return False
    
    # --- 3. Test de Funcionalidad B√°sica ---
    print("\nüîß Probando TaewAnalyzer...")
    try:
        analyzer = TaewAnalyzer(
            min_wave_length=10,  # M√°s permisivo para dataset peque√±o
            enable_both_directions=True
        )
        print("‚úÖ TaewAnalyzer inicializado")
        
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False
    
    # --- 4. An√°lisis √önico (Sin Bucle) ---
    print("\nüåä Ejecutando an√°lisis de ondas...")
    
    try:
        # Preparar datos
        historical_df.set_index('Close_time', inplace=True)
        
        # An√°lisis completo en una sola pasada
        start_analysis = datetime.now()
        detected_waves = analyzer.analyze_elliott_waves(historical_df, price_column='Close')
        end_analysis = datetime.now()
        
        analysis_time = (end_analysis - start_analysis).total_seconds()
        
        print(f"‚è±Ô∏è  An√°lisis completado en {analysis_time:.2f} segundos")
        print(f"üåä Ondas detectadas: {len(detected_waves)}")
        
        if detected_waves:
            print(f"\nüìã Resumen de ondas:")
            
            # Estad√≠sticas b√°sicas
            upward = [w for w in detected_waves if w.get('direction') == 'UPWARD']
            downward = [w for w in detected_waves if w.get('direction') == 'DOWNWARD']
            
            print(f"   Ondas alcistas: {len(upward)}")
            print(f"   Ondas bajistas: {len(downward)}")
            
            # Mostrar solo las 3 ondas m√°s recientes
            print(f"\nüîç √öltimas 3 ondas detectadas:")
            for i, wave in enumerate(detected_waves[-3:]):
                direction = wave.get('direction', 'UNKNOWN')
                wave_count = len(wave.get('x', []))
                confidence = wave.get('confidence', 0.0)
                
                print(f"   Onda #{len(detected_waves)-2+i}:")
                print(f"     Direcci√≥n: {direction}")
                print(f"     Puntos: {wave_count}")
                print(f"     Confianza: {confidence:.2f}")
                
                # Se√±al de trading
                signal_info = analyzer.get_latest_wave_signal([wave])
                if signal_info:
                    action = signal_info.get('suggested_action', 'HOLD')
                    print(f"     Se√±al: {action}")
            
            # Se√±al m√°s reciente
            latest_signal = analyzer.get_latest_wave_signal(detected_waves)
            if latest_signal:
                print(f"\nüö¶ Se√±al actual del mercado:")
                print(f"   Acci√≥n: {latest_signal.get('suggested_action', 'HOLD')}")
                print(f"   Confianza: {latest_signal.get('confidence', 0.0):.2f}")
        
        else:
            print("‚ÑπÔ∏è  No se detectaron ondas (normal con dataset peque√±o)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en an√°lisis: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_analyzer_components():
    """
    Prueba componentes individuales del TaewAnalyzer.
    """
    print("\n" + "="*50)
    print("üß™ PRUEBAS DE COMPONENTES")
    print("="*50)
    
    try:
        # Test 1: Importaci√≥n de taew
        print("üîç Test 1: Verificando librer√≠a taew...")
        import taew
        print("‚úÖ taew importado correctamente")
        
        # Test 2: Funciones b√°sicas de taew
        print("\nüîç Test 2: Probando funciones de taew...")
        test_prices = [100, 105, 103, 108, 102, 110, 108, 115, 112, 118]
        
        # Probar funci√≥n b√°sica
        result = taew.Alternative_ElliottWave_label_upward(test_prices)
        print(f"‚úÖ Funci√≥n de an√°lisis alcista ejecutada: {len(result)} resultados")
        
        # Test 3: TaewAnalyzer con datos sint√©ticos
        print("\nüîç Test 3: TaewAnalyzer con datos sint√©ticos...")
        analyzer = TaewAnalyzer(min_wave_length=5, enable_both_directions=False)
        
        # Crear DataFrame sint√©tico
        synthetic_df = pd.DataFrame({
            'Close': test_prices,
            'Close_time': pd.date_range('2024-01-01', periods=len(test_prices), freq='H')
        })
        synthetic_df.set_index('Close_time', inplace=True)
        
        synthetic_waves = analyzer.analyze_elliott_waves(synthetic_df)
        print(f"‚úÖ TaewAnalyzer proces√≥ datos sint√©ticos: {len(synthetic_waves)} ondas")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR en pruebas de componentes: {e}")
        return False


def main():
    """Funci√≥n principal optimizada."""
    print("üéØ Iniciando validaci√≥n r√°pida de taew...")
    start_time = datetime.now()
    
    try:
        # Pruebas de componentes primero
        components_ok = test_analyzer_components()
        
        if not components_ok:
            print("\n‚ùå Fallo en pruebas b√°sicas")
            return
        
        # Validaci√≥n principal (optimizada)
        validation_ok = quick_taew_validation()
        
        # Tiempo total
        end_time = datetime.now()
        total_time = (end_time - start_time).total_seconds()
        
        print(f"\n" + "="*50)
        print(f"‚è±Ô∏è  TIEMPO TOTAL: {total_time:.2f} segundos")
        
        if validation_ok:
            print("üéâ ¬°VALIDACI√ìN EXITOSA!")
            print("\n‚úÖ Resultados:")
            print("   - taew instalado y funcional")
            print("   - TaewAnalyzer operativo")
            print("   - Detecci√≥n de ondas confirmada")
            print("   - Generaci√≥n de se√±ales activa")
            
            print(f"\nüöÄ ¬°Sistema listo para ElliottWaveStrategy!")
            
        else:
            print("‚ùå Validaci√≥n incompleta - revisar errores")
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Validaci√≥n interrumpida")
    except Exception as e:
        print(f"\nüí• ERROR: {e}")


if __name__ == "__main__":
    main()